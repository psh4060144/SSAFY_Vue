Frontend Development: 웹 사이트와 웹 애플리케이션의 사용자 인터페이스(UI)와 사용자 경험(UX)을 만들고 디자인하는 것.
-> 클라이언트 측에서 UI와 상호작용을 개발하기 위해 사용되는 JS 기반 프레임워크: Vue

근데, 클라이언트 측 프레임워크가 왜 필요한가?
1. 웹에서 하는 일이 많다.
  문서만 읽는 게 아니라, 음악을 스트리밍하고, 영화를 보고, 먼 거리를 직접 통신하고 있음.
  이러한 현대적이고 복잡한 대화형 웹 사이트(웹 애플리케이션)를 더 쉽게 구축할 수 있는 게 Client-side Framework.
2. 다루는 데이터가 많아졌다.
  애플리케이션의 상태를 변경할 때마다 일치하도록 UI를 업데이트해야 하는데, 정보의 양이 많다.
  Vanilla JS 만으로는 쉽지 않다.

Client-side Framework의 필요성
1. 동적이고 반응적인 웹 애플리케이션 개발(실시간 데이터 업데이트)
2. 코드 재사용성 증가(컴포넌트 기반 아키텍쳐, 모듈화된 코드 구조)
3. 개발 생산성 향상(강력한 개발 도구 지원)



SPA(Single Page Application): 단일 페이지에서 동작하는 웹 어플리케이션
최초 로드 시 필요한 모든 리소스를 받아, 페이지 갱신에 필요한 데이터만을 비동기적으로 받아 갱신.
JS를 사용하여 클라이언트 측에서 동적으로 콘텐츠를 생성하고 업데이트.

CSR(Client-side Rendering): 클라이언트에서 콘텐츠를 렌더링하는 방식.
1. 사용자가 웹사이트에 요청을 보냄.
2. 서버는 최소한의 HTML과 JS파일을 클라이언트로 전송.
3. 클라이언트는 HTML과 JS를 다운로드받음.
4. 브라우저가 JS를 실행하여 동적으로 페이지 컨텐츠를 생성.
5. 필요한 데이터는 API를 통해 서버로부터 비동기적으로 가져옴.

두 방식의 장점
1. 페이지 전환이 빠르다
  페이지가 처음 로드된 후에는 필요한 데이터만 가져오면 되고, JS는 페이지의 일부를 다시 렌더링할 수 있기 때문.
  서버로 전송되는 데이터의 양을 최소화 = 서버 부하 방지.
2. 사용자 경험
  새로고침이 발생하지 않아 네이티브 앱과 유사한 사용자 경험을 제공
3. Frontend와 Backend의 명확한 분리
  Frontend는 UI 렌더링, 사용자 상호작용 처리를 담당 / Backend는 데이터 및 API 제공을 담당
  대규모 애플리케이션을 더 쉽게 개발하고 유지 관리 가능

두 방식의 단점
1. 초기 로드 속도가 느리다
  전체 페이지를 보기 전에 약간의 지연을 느낄 수 있음.
  JS가 다운로드, 구문 분석 및 실행될 때까지 페이지가 완전히 렌더링되지 않기 때문.
2. SEO(검색 엔진 최적화) 문제
  페이지를 나중에 그려 나가는 것이기 때문에 검색에 잘 노출되지 않을 수 있음.
  검색엔진 입장에선 HTML을 읽어서 분석해야 하는데, 아직 컨텐츠가 모두 존재하지 않기 때문.